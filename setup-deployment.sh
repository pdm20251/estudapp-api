#!/bin/bash

# Script para configurar o deployment no Google Cloud
# Baseado nas configura√ß√µes testadas e funcionais

set -e

# Vari√°veis (substitua pelos seus valores)
PROJECT_ID="estudapp-71947"
REGION="southamerica-east1"
SERVICE_NAME="estudapp-api"
GITHUB_OWNER="pdm20251"
GITHUB_REPO="estudapp-api"
BRANCH_NAME="master"

echo "üöÄ Configurando deployment para o projeto: $PROJECT_ID"
echo "üì¶ Servi√ßo: $SERVICE_NAME"
echo "üåç Regi√£o: $REGION"
echo ""

# 1. Verificar autentica√ß√£o
echo "üîê Verificando autentica√ß√£o..."
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q "@"; then
    echo "‚ùå Erro: Voc√™ precisa estar autenticado no Google Cloud"
    echo "Execute: gcloud auth login"
    exit 1
fi

# 2. Configurar projeto
echo "‚öôÔ∏è  Configurando projeto..."
gcloud config set project $PROJECT_ID

# 3. Habilitar APIs necess√°rias
echo "üì° Habilitando APIs do Google Cloud..."
gcloud services enable cloudbuild.googleapis.com \
  containerregistry.googleapis.com \
  run.googleapis.com \
  iamcredentials.googleapis.com \
  --project=$PROJECT_ID

# 4. Obter informa√ß√µes do projeto
PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")
CLOUD_BUILD_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"

echo "üìä Informa√ß√µes do projeto:"
echo "   Project ID: $PROJECT_ID"
echo "   Project Number: $PROJECT_NUMBER"
echo "   Cloud Build SA: $CLOUD_BUILD_SA"
echo ""

# 5. Configurar permiss√µes do Cloud Build
echo "üîë Configurando permiss√µes do Cloud Build..."

# Permiss√µes b√°sicas para Cloud Run
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:${CLOUD_BUILD_SA}" \
  --role="roles/run.admin" \
  --quiet

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:${CLOUD_BUILD_SA}" \
  --role="roles/iam.serviceAccountUser" \
  --quiet

# Permiss√µes para Container Registry
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:${CLOUD_BUILD_SA}" \
  --role="roles/storage.admin" \
  --quiet

echo "‚úÖ Permiss√µes configuradas"

# 6. Verificar arquivos necess√°rios
echo "üìÅ Verificando arquivos do projeto..."
FILES=("build.gradle.kts" "cloudbuild.yaml" "src/main/kotlin/Application.kt")
for file in "${FILES[@]}"; do
    if [[ ! -f "$file" ]]; then
        echo "‚ùå Arquivo n√£o encontrado: $file"
        echo "   Certifique-se de que todos os arquivos do projeto est√£o presentes"
        exit 1
    fi
done
echo "‚úÖ Todos os arquivos necess√°rios encontrados"

# 7. Instru√ß√µes para conectar GitHub
echo ""
echo "üîó CONFIGURA√á√ÉO DO GITHUB:"
echo "=========================================="
echo "1. Acesse: https://console.cloud.google.com/cloud-build/triggers?project=${PROJECT_ID}"
echo "2. Clique em 'Criar Trigger'"
echo "3. Conecte seu reposit√≥rio GitHub"
echo "4. Configure o trigger:"
echo "   - Nome: ${SERVICE_NAME}-deploy"
echo "   - Evento: Push para branch"
echo "   - Branch: ^${BRANCH_NAME}$"
echo "   - Configura√ß√£o: Cloud Build (cloudbuild.yaml)"
echo ""

# 9. Teste local do build (opcional)
echo "üèóÔ∏è  PRIMEIRO BUILD (Execute ap√≥s configurar o trigger):"
echo "gcloud builds submit --config cloudbuild.yaml --project=${PROJECT_ID}"
echo ""

# 10. Configura√ß√£o de permiss√µes p√≥s-deploy
echo "üîì CONFIGURA√á√ÉO P√ìS-DEPLOY (Execute ap√≥s o primeiro deploy):"
echo "gcloud run services add-iam-policy-binding ${SERVICE_NAME} \\"
echo "  --member=\"allUsers\" \\"
echo "  --role=\"roles/run.invoker\" \\"
echo "  --region=${REGION} \\"
echo "  --project=${PROJECT_ID}"
echo ""

# 11. Comandos √∫teis
echo "üõ†Ô∏è  COMANDOS √öTEIS:"
echo "=========================================="
echo "# Ver status do servi√ßo:"
echo "gcloud run services describe ${SERVICE_NAME} --region=${REGION}"
echo ""
echo "# Ver logs:"
echo "gcloud run services logs read ${SERVICE_NAME} --region=${REGION}"
echo ""
echo "# Obter URL do servi√ßo:"
echo "gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format=\"value(status.url)\""
echo ""
echo "# Testar endpoints:"
echo "SERVICE_URL=\$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format=\"value(status.url)\")"
echo "curl \"\$SERVICE_URL/\""
echo "curl \"\$SERVICE_URL/health\""
echo ""

# 12. Verifica√ß√£o final
echo "üéØ PR√ìXIMOS PASSOS:"
echo "=========================================="
echo "1. ‚úÖ APIs habilitadas"
echo "2. ‚úÖ Permiss√µes configuradas" 
echo "3. üîÑ Configure o trigger do GitHub (veja instru√ß√µes acima)"
echo "4. üîÑ Fa√ßa o primeiro build"
echo "5. üîÑ Configure permiss√µes p√∫blicas do servi√ßo"
echo ""
echo "üåê Ap√≥s o deploy, sua API estar√° dispon√≠vel em:"
echo "https://${SERVICE_NAME}-${PROJECT_NUMBER}.${REGION}.run.app"
echo ""
echo "‚ú® Configura√ß√£o conclu√≠da com sucesso!"